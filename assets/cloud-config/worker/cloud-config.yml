#cloud-config

hostname: "k8s-worker"

coreos:
  etcd2:
    proxy: on
    discovery: ${discovery_url}
    listen-client-urls: http://0.0.0.0:2379
  update:
    reboot-strategy: etcd-lock
    group : "worker"
  locksmith:
    endpoint: http://127.0.0.1:2379
  flannel:
    interface: $private_ipv4
    etcd_endpoints: http://127.0.0.1:2379
  units:
    - name: tls.service
      command: start
      content: |
        [Unit]
        Description=Generate TLS asset
        [Service]
        User=root
        Group=root
        Type=oneshot
        RemainAfterExit=yes
        ExecStartPre=/usr/bin/openssl genrsa -out /etc/kubernetes/ssl/worker-key.pem 2048
        ExecStartPre=/usr/bin/openssl req -new -key /etc/kubernetes/ssl/worker-key.pem -out /etc/kubernetes/ssl/worker.csr -subj "/CN=kube-worker-1337" -config /etc/kubernetes/ssl/api-client.cnf
        ExecStartPre=/usr/bin/openssl x509 -req -in /etc/kubernetes/ssl/worker.csr -CA /etc/kubernetes/ssl/ca.pem -CAkey /etc/kubernetes/ssl/ca-key.pem -CAcreateserial -out /etc/kubernetes/ssl/worker.pem -days 10000 -extensions v3_req -extfile /etc/kubernetes/ssl/api-client.cnf
        ExecStartPre=/usr/bin/chmod 600 /etc/kubernetes/ssl/worker-key.pem
        ExecStartPre=/usr/bin/chown root /etc/kubernetes/ssl/worker-key.pem
        ExecStartPre=/usr/bin/rm /etc/kubernetes/ssl/ca-key.pem
        ExecStartPre=/usr/bin/rm /etc/kubernetes/ssl/ca.srl
        ExecStartPre=/usr/bin/rm /etc/kubernetes/ssl/api-client.cnf
        ExecStartPre=/usr/bin/rm /etc/kubernetes/ssl/worker.csr
        ExecStart=/usr/bin/echo "Done creating tls assets."

        [Install]
        WantedBy=multi-user.target

    - name: waitformaster.service
      command: start
      content: |
        [Unit]
        Description=Wait for Master
        [Service]
        User=root
        Group=root
        Type=oneshot
        RemainAfterExit=yes
        ExecStartPre=/opt/bin/waitformaster
        ExecStart=/usr/bin/echo "Master is up!"

    - name: etcd2.service
      command: start

    - name: flanneld.service
      command: start

    - name: docker.service
      command: start
      drop-ins:
        - name: 40-flannel.conf
          content: |
            [Unit]
            Requires=flanneld.service
            After=flanneld.service
            [Service]
            EnvironmentFile=/etc/kubernetes/cni/docker_opts_cni.env

    - name: kubelet.service
      command: start
      content: |
        [Unit]
        Requires=docker.service tls.service waitformaster.service
        After=docker.service tls.service waitformaster.service
        [Service]
        ExecStartPre=/usr/bin/mkdir -p /etc/kubernetes/manifests
        ExecStartPre=/usr/bin/mkdir -p /var/log/containers
        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/run/kubelet-pod.uuid
        ExecStartPre=-/opt/bin/wupiao ${MASTER_HOST}:443

        Environment=KUBELET_VERSION=v1.5.1_coreos.0
        Environment="RKT_OPTS=--uuid-file-save=/var/run/kubelet-pod.uuid \
          --volume dns,kind=host,source=/etc/resolv.conf \
          --mount volume=dns,target=/etc/resolv.conf \
          --volume var-log,kind=host,source=/var/log \
          --mount volume=var-log,target=/var/log"

        ExecStart=/usr/lib/coreos/kubelet-wrapper \
          --api-servers=https://${MASTER_HOST}:443 \
          --cni-conf-dir=/etc/kubernetes/cni/net.d \
          --network-plugin=cni \
          --container-runtime=docker \
          --register-node=true \
          --allow-privileged=true \
          --pod-manifest-path=/etc/kubernetes/manifests \
          --hostname-override=$private_ipv4 \
          --cluster-dns=10.3.0.10 \
          --cluster-domain=cluster.local \
          --kubeconfig=/etc/kubernetes/worker-kubeconfig.yaml \
          --tls-cert-file=/etc/kubernetes/ssl/worker.pem \
          --tls-private-key-file=/etc/kubernetes/ssl/worker-key.pem
        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/run/kubelet-pod.uuid
        Restart=always
        RestartSec=10
        [Install]
        WantedBy=multi-user.target

write_files:
  # hack: the splitting and joining serves to move content 6 spaces to the right
  # so it complies with yaml standard
  - path: "/etc/kubernetes/ssl/ca.pem"
    content: |
      ${join("\n      ", split("\n", tls-root-ca))}

  - path: "/etc/kubernetes/ssl/ca-key.pem"
    content: |
      ${join("\n      ", split("\n", tls-root-ca-key))}

  - path: "/etc/kubernetes/ssl/api-client.cnf"
    content: |
      ${join("\n      ", split("\n", tls-client-conf))}

  - path: "/etc/kubernetes/manifests/kube-proxy.yaml"
    content: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: kube-proxy
        namespace: kube-system
      spec:
        hostNetwork: true
        containers:
        - name: kube-proxy
          image: quay.io/coreos/hyperkube:v1.5.1_coreos.0
          command:
          - /hyperkube
          - proxy
          - --master=https://${MASTER_HOST}:443
          - --kubeconfig=/etc/kubernetes/worker-kubeconfig.yaml
          securityContext:
            privileged: true
          volumeMounts:
          - mountPath: /etc/ssl/certs
            name: "ssl-certs"
          - mountPath: /etc/kubernetes/worker-kubeconfig.yaml
            name: "kubeconfig"
            readOnly: true
          - mountPath: /etc/kubernetes/ssl
            name: "etc-kube-ssl"
            readOnly: true
        volumes:
        - name: "ssl-certs"
          hostPath:
            path: "/usr/share/ca-certificates"
        - name: "kubeconfig"
          hostPath:
            path: "/etc/kubernetes/worker-kubeconfig.yaml"
        - name: "etc-kube-ssl"
          hostPath:
            path: "/etc/kubernetes/ssl"


  - path: "/etc/kubernetes/worker-kubeconfig.yaml"
    content: |
      apiVersion: v1
      kind: Config
      clusters:
      - name: local
        cluster:
          certificate-authority: /etc/kubernetes/ssl/ca.pem
      users:
      - name: kubelet
        user:
          client-certificate: /etc/kubernetes/ssl/worker.pem
          client-key: /etc/kubernetes/ssl/worker-key.pem
      contexts:
      - context:
          cluster: local
          user: kubelet
        name: kubelet-context
      current-context: kubelet-context

  - path: /etc/kubernetes/cni/docker_opts_cni.env
    content: |
      DOCKER_OPT_BIP=""
      DOCKER_OPT_IPMASQ=""

  - path: "/etc/kubernetes/cni/net.d/10-flannel.conf"
    content: |
      {
          "name": "podnet",
          "type": "flannel",
          "delegate": {
              "isDefaultGateway": true
          }
      }

  - path: /opt/bin/waitformaster
    permissions: '0755'
    content: |
      #!/bin/bash
      until curl -o /dev/null -sIf --cacert /etc/kubernetes/ssl/ca.pem --cert /etc/kubernetes/ssl/worker.pem --key /etc/kubernetes/ssl/worker-key.pem https://${MASTER_HOST}/; do \
        sleep 1 && echo .;
      done;
